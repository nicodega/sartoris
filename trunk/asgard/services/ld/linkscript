OUTPUT_FORMAT("elf32-i386", "elf32-i386",
              "elf32-i386")
OUTPUT_ARCH(i386)
ENTRY(_ldstart)

PHDRS
{
  text PT_LOAD FILEHDR PHDRS;
  data PT_LOAD;
  dynamic PT_DYNAMIC;
  interp PT_INTERP;
}

SECTIONS
{
  PROVIDE (__executable_start = 0x0);
  . = SIZEOF_HEADERS;
  .interp : { 
	*(.interp) 
	} :text :interp
  .hash   : { *(.hash) } : text
  .dynsym : { *(.dynsym) } : text
  .dynstr : { *(.dynstr) } : text
  .text : { 
	*(.text .stub .text.* .gnu.linkonce.t.*) 
	} :text
  .init : { *(.init) } 
  .fini : { *(.init) } 
  .plt : { *(.plt) }
  .rodata : { *(.rodata .rodata.* .gnu.linkonce.r.* ) }      /* defaults to :text */
  .rodata1 : { *(.rodata1) }
  PROVIDE (etext = .);
  PROVIDE (_DYNAMIC = .);
  .dynamic : { *(.dynamic) } : dynamic
  PROVIDE (_edynamic = .);
  PROVIDE (_LDGOT = .);
  .got ALIGN(0x1000) : { *(.got.plt) *(.got) } : data
  PROVIDE (_LDGOTEND = .);
  .rel        : { *(.rel*) }
  .rela       : { *(.rela*) }
  .data ALIGN(0x1000) : 
  { 
    *(.data .data.* .gnu.linkonce.d.*) 
    PROVIDE (__start_ctors = .);
		*(.ctor*)
	PROVIDE (__end_ctors = .);
	PROVIDE (__start_dtors = .);            
		*(.dtor*)
	PROVIDE (__end_dtors = .);    
  } :data
  PROVIDE (edata = .);
  .bss :
  {
   *(.bss .bss.* .gnu.linkonce.b.*)
   *(COMMON)
   /* Align here to ensure that the .bss section occupies space up to
      _end.  Align after .bss to ensure correct alignment even if the
      .bss section disappears because there are no input sections.  */
   . = ALIGN(32 / 8);
  }
  . = ALIGN(32 / 8);
  PROVIDE (end = .);
  /DISCARD/ : { *(.note.GNU-stack) *(.comment) }
}

